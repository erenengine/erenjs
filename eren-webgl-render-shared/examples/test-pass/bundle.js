(()=>{"use strict";WebGL2RenderingContext.ARRAY_BUFFER,WebGL2RenderingContext.ELEMENT_ARRAY_BUFFER,WebGL2RenderingContext.STATIC_DRAW,WebGL2RenderingContext.FLOAT,WebGL2RenderingContext.LESS;class e{#e;#r;constructor(e,r,t){this.#e=e,this.#r=this.#e.createProgram(r,t)}use(){this.#e.useProgram(this.#r)}getUniformLocation(e){return this.#e.getUniformLocation(this.#r,e)}}const r={r:.1921,g:.302,b:.4745,a:1};class t{#e;#r;constructor(r){this.#e=r,this.#r=new e(r,"#version 300 es\nprecision mediump float;      // WebGL2 에서는 명시적 정밀도 필요\n\nout vec3 vColor;              // fragment 로 넘길 색상\n\n// 내부 상수 배열\nconst vec2 positions[3] = vec2[3](\n    vec2( 0.0, -0.5),\n    vec2( 0.5,  0.5),\n    vec2(-0.5,  0.5)\n);\n\nconst vec3 colors[3] = vec3[3](\n    vec3(1.0, 0.0, 0.0),\n    vec3(0.0, 1.0, 0.0),\n    vec3(0.0, 0.0, 1.0)\n);\n\nvoid main() {\n    // WebGL2 에서는 gl_VertexID 사용\n    vec2 p = positions[gl_VertexID];\n    // Y축 뒤집기\n    gl_Position = vec4(p.x, -p.y, 0.0, 1.0);\n    vColor      = colors[gl_VertexID];\n}\n","#version 300 es\nprecision mediump float;\n\nin vec3 vColor;\nout vec4 fragColor;\n\nvoid main() {\n    fragColor = vec4(vColor, 1.0);\n}\n")}recordCommands(){this.#e.clear(r),this.#r.use(),this.#e.draw(3,1)}}const n=document.getElementById("canvas"),s=new class{#e;constructor(e){this.#e=e}#t(e,r){const t=this.#e.createShader(r);if(!t)throw new Error("Failed to create shader");if(this.#e.shaderSource(t,e),this.#e.compileShader(t),!this.#e.getShaderParameter(t,this.#e.COMPILE_STATUS)){const e=this.#e.getShaderInfoLog(t);throw this.#e.deleteShader(t),new Error("Failed to compile shader: "+e)}return t}createProgram(e,r){const t=this.#t(e,this.#e.VERTEX_SHADER),n=this.#t(r,this.#e.FRAGMENT_SHADER),s=this.#e.createProgram();if(this.#e.attachShader(s,t),this.#e.attachShader(s,n),this.#e.linkProgram(s),!this.#e.getProgramParameter(s,this.#e.LINK_STATUS)){const e=this.#e.getProgramInfoLog(s);throw this.#e.deleteProgram(s),new Error("Failed to link program: "+e)}return s}useProgram(e){this.#e.useProgram(e)}createVertexArray(){return this.#e.createVertexArray()}bindVertexArray(e){this.#e.bindVertexArray(e)}createBuffer(){return this.#e.createBuffer()}bindBuffer(e,r){this.#e.bindBuffer(e,r)}bufferData(e,r,t){this.#e.bufferData(e,r,t)}enableVertexAttribArray(e){this.#e.enableVertexAttribArray(e)}vertexAttribPointer(e,r,t,n,s,i){this.#e.vertexAttribPointer(e,r,t,n,s,i)}uniformMatrix4fv(e,r,t){this.#e.uniformMatrix4fv(e,r,t)}getUniformLocation(e,r){return this.#e.getUniformLocation(e,r)}clear(e){this.#e.clearColor(e.r,e.g,e.b,e.a),this.#e.clear(this.#e.COLOR_BUFFER_BIT)}draw(e,r){this.#e.drawArraysInstanced(this.#e.TRIANGLES,0,e,r)}drawElements(e){this.#e.drawElements(this.#e.TRIANGLES,e,this.#e.UNSIGNED_SHORT,0)}drawIndexed(e,r){this.#e.drawElementsInstanced(this.#e.TRIANGLE_STRIP,e,this.#e.UNSIGNED_SHORT,0,r)}enableDepthTest(){this.#e.enable(this.#e.DEPTH_TEST)}disableDepthTest(){this.#e.disable(this.#e.DEPTH_TEST)}depthFunc(e){this.#e.depthFunc(e)}clearDepth(e){this.#e.clearDepth(e)}}(n.getContext("webgl2")),i=new class{#n;constructor(e){this.#n=new t(e)}render(){this.#n.recordCommands()}}(s);!function e(){i.render(),requestAnimationFrame(e)}()})();