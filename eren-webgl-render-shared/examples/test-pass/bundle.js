(()=>{"use strict";WebGL2RenderingContext.ARRAY_BUFFER,WebGL2RenderingContext.ELEMENT_ARRAY_BUFFER,WebGL2RenderingContext.STATIC_DRAW,WebGL2RenderingContext.FLOAT;class r{#r;#e;constructor(r,e,t){this.#r=r,this.#e=this.#r.createProgram(e,t)}use(){this.#r.useProgram(this.#e)}getUniformLocation(r){return this.#r.getUniformLocation(this.#e,r)}}const e={r:.1921,g:.302,b:.4745,a:1};class t{#r;#e;constructor(e){this.#r=e,this.#e=new r(e,"#version 300 es\nprecision mediump float;      // WebGL2 에서는 명시적 정밀도 필요\n\nout vec3 vColor;              // fragment 로 넘길 색상\n\n// 내부 상수 배열\nconst vec2 positions[3] = vec2[3](\n    vec2( 0.0, -0.5),\n    vec2( 0.5,  0.5),\n    vec2(-0.5,  0.5)\n);\n\nconst vec3 colors[3] = vec3[3](\n    vec3(1.0, 0.0, 0.0),\n    vec3(0.0, 1.0, 0.0),\n    vec3(0.0, 0.0, 1.0)\n);\n\nvoid main() {\n    // WebGL2 에서는 gl_VertexID 사용\n    vec2 p = positions[gl_VertexID];\n    // Y축 뒤집기\n    gl_Position = vec4(p.x, -p.y, 0.0, 1.0);\n    vColor      = colors[gl_VertexID];\n}\n","#version 300 es\nprecision mediump float;\n\nin vec3 vColor;\nout vec4 fragColor;\n\nvoid main() {\n    fragColor = vec4(vColor, 1.0);\n}\n")}recordCommands(){this.#r.clear(e),this.#e.use(),this.#r.draw(3,1)}}const n=document.getElementById("canvas"),o=new class{#r;constructor(r){this.#r=r}#t(r,e){const t=this.#r.createShader(e);if(!t)throw new Error("Failed to create shader");if(this.#r.shaderSource(t,r),this.#r.compileShader(t),!this.#r.getShaderParameter(t,this.#r.COMPILE_STATUS)){const r=this.#r.getShaderInfoLog(t);throw this.#r.deleteShader(t),new Error("Failed to compile shader: "+r)}return t}createProgram(r,e){const t=this.#t(r,this.#r.VERTEX_SHADER),n=this.#t(e,this.#r.FRAGMENT_SHADER),o=this.#r.createProgram();if(this.#r.attachShader(o,t),this.#r.attachShader(o,n),this.#r.linkProgram(o),!this.#r.getProgramParameter(o,this.#r.LINK_STATUS)){const r=this.#r.getProgramInfoLog(o);throw this.#r.deleteProgram(o),new Error("Failed to link program: "+r)}return o}useProgram(r){this.#r.useProgram(r)}createVertexArray(){return this.#r.createVertexArray()}bindVertexArray(r){this.#r.bindVertexArray(r)}createBuffer(){return this.#r.createBuffer()}bindBuffer(r,e){this.#r.bindBuffer(r,e)}bufferData(r,e,t){this.#r.bufferData(r,e,t)}enableVertexAttribArray(r){this.#r.enableVertexAttribArray(r)}vertexAttribPointer(r,e,t,n,o,i){this.#r.vertexAttribPointer(r,e,t,n,o,i)}uniformMatrix4fv(r,e,t){this.#r.uniformMatrix4fv(r,e,t)}getUniformLocation(r,e){return this.#r.getUniformLocation(r,e)}clear(r){this.#r.clearColor(r.r,r.g,r.b,r.a),this.#r.clear(this.#r.COLOR_BUFFER_BIT)}draw(r,e){this.#r.drawArraysInstanced(this.#r.TRIANGLES,0,r,e)}drawElements(r,e){this.#r.drawElementsInstanced(this.#r.TRIANGLES,r,this.#r.UNSIGNED_SHORT,0,e)}}(n.getContext("webgl2")),i=new class{#n;constructor(r){this.#n=new t(r)}render(){this.#n.recordCommands()}}(o);!function r(){i.render(),requestAnimationFrame(r)}()})();