import SHADER_STR from './shaders/shader.wgsl';
import { flattenVertices, VERTEX_DESC } from './vertex';
import { vec2, vec3 } from 'gl-matrix';
const CLEAR_COLOR = { r: 0.1921, g: 0.302, b: 0.4745, a: 1 };
const TEST_VERTICES = [
    // 첫 번째 삼각형: 좌하단 → 우하단 → 우상단
    {
        pos: vec2.fromValues(-0.5, -0.5),
        color: vec3.fromValues(1, 0, 0),
    },
    {
        pos: vec2.fromValues(0.5, -0.5),
        color: vec3.fromValues(0, 1, 0),
    },
    {
        pos: vec2.fromValues(0.5, 0.5),
        color: vec3.fromValues(0, 0, 1),
    },
    // 두 번째 삼각형: 우상단 → 좌상단 → 좌하단
    {
        pos: vec2.fromValues(0.5, 0.5),
        color: vec3.fromValues(0, 0, 1),
    },
    {
        pos: vec2.fromValues(-0.5, 0.5),
        color: vec3.fromValues(1, 1, 1),
    },
    {
        pos: vec2.fromValues(-0.5, -0.5),
        color: vec3.fromValues(1, 0, 0),
    },
];
function createVertexBuffer(device) {
    const flatVertexData = flattenVertices(TEST_VERTICES);
    const vertexFloatLength = flatVertexData.length;
    const vertexSize = vertexFloatLength * 4;
    const buffer = device.createBuffer({
        label: 'Test Buffer',
        size: vertexSize,
        usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,
        mappedAtCreation: true,
    });
    const mapping = new Uint8Array(buffer.getMappedRange());
    new Float32Array(mapping.buffer).set(flatVertexData);
    buffer.unmap();
    return buffer;
}
export class TestRenderPass {
    #device;
    #pipeline;
    #vertexBuffer;
    constructor(device, format) {
        this.#device = device;
        let shaderModule = device.createShaderModule({ label: 'Test Shader', code: SHADER_STR });
        let pipelineLayout = device.createPipelineLayout({
            label: 'Test Pipeline Layout',
            bindGroupLayouts: [],
            // WebGPU에서는 pushConstantRanges를 지원하지 않음
        });
        this.#pipeline = device.createRenderPipeline({
            label: 'Test Pipeline',
            layout: pipelineLayout,
            vertex: {
                module: shaderModule,
                entryPoint: 'vs_main',
                buffers: [VERTEX_DESC],
            },
            fragment: {
                module: shaderModule,
                entryPoint: 'fs_main',
                targets: [{ format }],
            },
            primitive: {
                topology: 'triangle-list',
            },
        });
        this.#vertexBuffer = createVertexBuffer(device);
    }
    recordCommands(encoder, view) {
        const passEncoder = encoder.beginRenderPass({
            colorAttachments: [{
                    view,
                    loadOp: 'clear',
                    storeOp: 'store',
                    clearValue: CLEAR_COLOR,
                }],
        });
        passEncoder.setPipeline(this.#pipeline);
        passEncoder.setVertexBuffer(0, this.#vertexBuffer, 0);
        passEncoder.draw(TEST_VERTICES.length, 1);
        passEncoder.end();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLXBhc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZW5kZXItcGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFVBQVUsTUFBTSx1QkFBdUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsZUFBZSxFQUFVLFdBQVcsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUV2QyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUU3RCxNQUFNLGFBQWEsR0FBYTtJQUM5Qiw0QkFBNEI7SUFDNUI7UUFDRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUNoQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNoQztJQUNEO1FBQ0UsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO1FBQy9CLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ2hDO0lBQ0Q7UUFDRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDO1FBQzlCLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ2hDO0lBRUQsNEJBQTRCO0lBQzVCO1FBQ0UsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztRQUM5QixLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVUs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QUFDO1NBQ0gsQ0FBQyxDQUFDO1FBRUgsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFeEMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUV0RCxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTSEFERVJfU1RSIGZyb20gJy4vc2hhZGVycy9zaGFkZXIud2dzbCc7XG5pbXBvcnQgeyBEZXZpY2UgfSBmcm9tICcuLi8uLi9kaXN0L2RldmljZS5qcyc7XG5pbXBvcnQgeyBmbGF0dGVuVmVydGljZXMsIFZlcnRleCwgVkVSVEVYX0RFU0MgfSBmcm9tICcuL3ZlcnRleCc7XG5pbXBvcnQgeyB2ZWMyLCB2ZWMzIH0gZnJvbSAnZ2wtbWF0cml4JztcblxuY29uc3QgQ0xFQVJfQ09MT1IgPSB7IHI6IDAuMTkyMSwgZzogMC4zMDIsIGI6IDAuNDc0NSwgYTogMSB9O1xuXG5jb25zdCBURVNUX1ZFUlRJQ0VTOiBWZXJ0ZXhbXSA9IFtcbiAgLy8g7LKrIOuyiOynuCDsgrzqsIHtmJU6IOyijO2VmOuLqCDihpIg7Jqw7ZWY64uoIOKGkiDsmrDsg4Hri6hcbiAge1xuICAgIHBvczogdmVjMi5mcm9tVmFsdWVzKC0wLjUsIC0wLjUpLFxuICAgIGNvbG9yOiB2ZWMzLmZyb21WYWx1ZXMoMSwgMCwgMCksXG4gIH0sXG4gIHtcbiAgICBwb3M6IHZlYzIuZnJvbVZhbHVlcygwLjUsIC0wLjUpLFxuICAgIGNvbG9yOiB2ZWMzLmZyb21WYWx1ZXMoMCwgMSwgMCksXG4gIH0sXG4gIHtcbiAgICBwb3M6IHZlYzIuZnJvbVZhbHVlcygwLjUsIDAuNSksXG4gICAgY29sb3I6IHZlYzMuZnJvbVZhbHVlcygwLCAwLCAxKSxcbiAgfSxcblxuICAvLyDrkZAg67KI7Ke4IOyCvOqwge2YlTog7Jqw7IOB64uoIOKGkiDsoozsg4Hri6gg4oaSIOyijO2VmOuLqFxuICB7XG4gICAgcG9zOiB2ZWMyLmZyb21WYWx1ZXMoMC41LCAwLjUpLFxuICAgIGNvbG9yOiB2ZWMzLmZyb21WYWx1ZXMoMCwgMCwgMSksXG4gIH0sXG4gIHtcbiAgICBwb3M6IHZlYzIuZnJvbVZhbHVlcygtMC41LCAwLjUpLFxuICAgIGNvbG9yOiB2ZWMzLmZyb21WYWx1ZXMoMSwgMSwgMSksXG4gIH0sXG4gIHtcbiAgICBwb3M6IHZlYzIuZnJvbVZhbHVlcygtMC41LCAtMC41KSxcbiAgICBjb2xvcjogdmVjMy5mcm9tVmFsdWVzKDEsIDAsIDApLFxuICB9LFxuXTtcblxuZnVuY3Rpb24gY3JlYXRlVmVydGV4QnVmZmVyKGRldmljZTogRGV2aWNlKTogR1BVQnVmZmVyIHtcbiAgY29uc3QgZmxhdFZlcnRleERhdGEgPSBmbGF0dGVuVmVydGljZXMoVEVTVF9WRVJUSUNFUyk7XG4gIGNvbnN0IHZlcnRleEZsb2F0TGVuZ3RoID0gZmxhdFZlcnRleERhdGEubGVuZ3RoO1xuICBjb25zdCB2ZXJ0ZXhTaXplID0gdmVydGV4RmxvYXRMZW5ndGggKiA0O1xuXG4gIGNvbnN0IGJ1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoe1xuICAgIGxhYmVsOiAnVGVzdCBCdWZmZXInLFxuICAgIHNpemU6IHZlcnRleFNpemUsXG4gICAgdXNhZ2U6IEdQVUJ1ZmZlclVzYWdlLlZFUlRFWCB8IEdQVUJ1ZmZlclVzYWdlLkNPUFlfRFNULFxuICAgIG1hcHBlZEF0Q3JlYXRpb246IHRydWUsXG4gIH0pO1xuXG4gIGNvbnN0IG1hcHBpbmcgPSBuZXcgVWludDhBcnJheShidWZmZXIuZ2V0TWFwcGVkUmFuZ2UoKSk7XG4gIG5ldyBGbG9hdDMyQXJyYXkobWFwcGluZy5idWZmZXIpLnNldChmbGF0VmVydGV4RGF0YSk7XG4gIGJ1ZmZlci51bm1hcCgpO1xuXG4gIHJldHVybiBidWZmZXI7XG59XG5cblxuZXhwb3J0IGNsYXNzIFRlc3RSZW5kZXJQYXNzIHtcbiAgI2RldmljZTogRGV2aWNlO1xuICAjcGlwZWxpbmU6IEdQVVJlbmRlclBpcGVsaW5lO1xuICAjdmVydGV4QnVmZmVyOiBHUFVCdWZmZXI7XG5cbiAgY29uc3RydWN0b3IoZGV2aWNlOiBEZXZpY2UsIGZvcm1hdDogR1BVVGV4dHVyZUZvcm1hdCkge1xuICAgIHRoaXMuI2RldmljZSA9IGRldmljZTtcblxuICAgIGxldCBzaGFkZXJNb2R1bGUgPSBkZXZpY2UuY3JlYXRlU2hhZGVyTW9kdWxlKHsgbGFiZWw6ICdUZXN0IFNoYWRlcicsIGNvZGU6IFNIQURFUl9TVFIgfSk7XG5cbiAgICBsZXQgcGlwZWxpbmVMYXlvdXQgPSBkZXZpY2UuY3JlYXRlUGlwZWxpbmVMYXlvdXQoe1xuICAgICAgbGFiZWw6ICdUZXN0IFBpcGVsaW5lIExheW91dCcsXG4gICAgICBiaW5kR3JvdXBMYXlvdXRzOiBbXSxcbiAgICAgIC8vIFdlYkdQVeyXkOyEnOuKlCBwdXNoQ29uc3RhbnRSYW5nZXPrpbwg7KeA7JuQ7ZWY7KeAIOyViuydjFxuICAgIH0pO1xuXG4gICAgdGhpcy4jcGlwZWxpbmUgPSBkZXZpY2UuY3JlYXRlUmVuZGVyUGlwZWxpbmUoe1xuICAgICAgbGFiZWw6ICdUZXN0IFBpcGVsaW5lJyxcbiAgICAgIGxheW91dDogcGlwZWxpbmVMYXlvdXQsXG4gICAgICB2ZXJ0ZXg6IHtcbiAgICAgICAgbW9kdWxlOiBzaGFkZXJNb2R1bGUsXG4gICAgICAgIGVudHJ5UG9pbnQ6ICd2c19tYWluJyxcbiAgICAgICAgYnVmZmVyczogW1ZFUlRFWF9ERVNDXSxcbiAgICAgIH0sXG4gICAgICBmcmFnbWVudDoge1xuICAgICAgICBtb2R1bGU6IHNoYWRlck1vZHVsZSxcbiAgICAgICAgZW50cnlQb2ludDogJ2ZzX21haW4nLFxuICAgICAgICB0YXJnZXRzOiBbeyBmb3JtYXQgfV0sXG4gICAgICB9LFxuICAgICAgcHJpbWl0aXZlOiB7XG4gICAgICAgIHRvcG9sb2d5OiAndHJpYW5nbGUtbGlzdCcsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy4jdmVydGV4QnVmZmVyID0gY3JlYXRlVmVydGV4QnVmZmVyKGRldmljZSk7XG4gIH1cblxuICByZWNvcmRDb21tYW5kcyhlbmNvZGVyOiBHUFVDb21tYW5kRW5jb2RlciwgdmlldzogR1BVVGV4dHVyZVZpZXcpIHtcbiAgICBjb25zdCBwYXNzRW5jb2RlciA9IGVuY29kZXIuYmVnaW5SZW5kZXJQYXNzKHtcbiAgICAgIGNvbG9yQXR0YWNobWVudHM6IFt7XG4gICAgICAgIHZpZXcsXG4gICAgICAgIGxvYWRPcDogJ2NsZWFyJyxcbiAgICAgICAgc3RvcmVPcDogJ3N0b3JlJyxcbiAgICAgICAgY2xlYXJWYWx1ZTogQ0xFQVJfQ09MT1IsXG4gICAgICB9XSxcbiAgICB9KTtcblxuICAgIHBhc3NFbmNvZGVyLnNldFBpcGVsaW5lKHRoaXMuI3BpcGVsaW5lKTtcblxuICAgIHBhc3NFbmNvZGVyLnNldFZlcnRleEJ1ZmZlcigwLCB0aGlzLiN2ZXJ0ZXhCdWZmZXIsIDApO1xuXG4gICAgcGFzc0VuY29kZXIuZHJhdyhURVNUX1ZFUlRJQ0VTLmxlbmd0aCwgMSk7XG4gICAgcGFzc0VuY29kZXIuZW5kKCk7XG4gIH1cbn1cbiJdfQ==