import SHADER_STR from './shaders/shader.wgsl';
const CLEAR_COLOR = { r: 0.1921, g: 0.302, b: 0.4745, a: 1 };
export class TestRenderPass {
    #pipeline;
    constructor(device, format) {
        let shaderModule = device.createShaderModule({ label: 'Test Shader', code: SHADER_STR });
        let pipelineLayout = device.createPipelineLayout({ label: 'Test Pipeline Layout', bindGroupLayouts: [] }); // WebGPU에서는 pushConstantRanges를 지원하지 않음
        this.#pipeline = device.createRenderPipeline({
            label: 'Test Pipeline',
            layout: pipelineLayout,
            vertex: {
                module: shaderModule,
                entryPoint: 'vs_main',
                buffers: [],
            },
            fragment: {
                module: shaderModule,
                entryPoint: 'fs_main',
                targets: [{ format }],
            },
            primitive: {
                topology: 'triangle-list',
            },
        });
    }
    recordCommands(encoder, view) {
        const passEncoder = encoder.beginRenderPass({
            colorAttachments: [{
                    view,
                    loadOp: 'clear',
                    storeOp: 'store',
                    clearValue: CLEAR_COLOR,
                }],
        });
        passEncoder.setPipeline(this.#pipeline);
        passEncoder.draw(3, 1);
        passEncoder.end();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLXBhc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZW5kZXItcGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFVBQVUsTUFBTSx1QkFBdUIsQ0FBQztBQUcvQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUU3RCxNQUFNLE9BQU8sY0FBYztJQUN6QixTQUFTLENBQW9CO0lBRTdCLFlBQVksTUFBYyxFQUFFLE1BQXdCO1FBQ2xELElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDekYsSUFBSSxjQUFjLEdBQUcsTUFBTSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsS0FBSyxFQUFFLHNCQUFzQixFQUFFLGdCQUFnQixFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyx3Q0FBd0M7UUFFbkosSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsb0JBQW9CLENBQUM7WUFDM0MsS0FBSyxFQUFFLGVBQWU7WUFDdEIsTUFBTSxFQUFFLGNBQWM7WUFDdEIsTUFBTSxFQUFFO2dCQUNOLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixVQUFVLEVBQUUsU0FBUztnQkFDckIsT0FBTyxFQUFFLEVBQUU7YUFDWjtZQUNELFFBQVEsRUFBRTtnQkFDUixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsVUFBVSxFQUFFLFNBQVM7Z0JBQ3JCLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUM7YUFDdEI7WUFDRCxTQUFTLEVBQUU7Z0JBQ1QsUUFBUSxFQUFFLGVBQWU7YUFDMUI7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsY0FBYyxDQUFDLE9BQTBCLEVBQUUsSUFBb0I7UUFDN0QsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQztZQUMxQyxnQkFBZ0IsRUFBRSxDQUFDO29CQUNqQixJQUFJO29CQUNKLE1BQU0sRUFBRSxPQUFPO29CQUNmLE9BQU8sRUFBRSxPQUFPO29CQUNoQixVQUFVLEVBQUUsV0FBVztpQkFDeEIsQ0FBQztTQUNILENBQUMsQ0FBQztRQUNILFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNwQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU0hBREVSX1NUUiBmcm9tICcuL3NoYWRlcnMvc2hhZGVyLndnc2wnO1xuaW1wb3J0IHsgRGV2aWNlIH0gZnJvbSAnLi4vLi4vZGlzdC9kZXZpY2UuanMnO1xuXG5jb25zdCBDTEVBUl9DT0xPUiA9IHsgcjogMC4xOTIxLCBnOiAwLjMwMiwgYjogMC40NzQ1LCBhOiAxIH07XG5cbmV4cG9ydCBjbGFzcyBUZXN0UmVuZGVyUGFzcyB7XG4gICNwaXBlbGluZTogR1BVUmVuZGVyUGlwZWxpbmU7XG5cbiAgY29uc3RydWN0b3IoZGV2aWNlOiBEZXZpY2UsIGZvcm1hdDogR1BVVGV4dHVyZUZvcm1hdCkge1xuICAgIGxldCBzaGFkZXJNb2R1bGUgPSBkZXZpY2UuY3JlYXRlU2hhZGVyTW9kdWxlKHsgbGFiZWw6ICdUZXN0IFNoYWRlcicsIGNvZGU6IFNIQURFUl9TVFIgfSk7XG4gICAgbGV0IHBpcGVsaW5lTGF5b3V0ID0gZGV2aWNlLmNyZWF0ZVBpcGVsaW5lTGF5b3V0KHsgbGFiZWw6ICdUZXN0IFBpcGVsaW5lIExheW91dCcsIGJpbmRHcm91cExheW91dHM6IFtdIH0pOyAvLyBXZWJHUFXsl5DshJzripQgcHVzaENvbnN0YW50UmFuZ2Vz66W8IOyngOybkO2VmOyngCDslYrsnYxcblxuICAgIHRoaXMuI3BpcGVsaW5lID0gZGV2aWNlLmNyZWF0ZVJlbmRlclBpcGVsaW5lKHtcbiAgICAgIGxhYmVsOiAnVGVzdCBQaXBlbGluZScsXG4gICAgICBsYXlvdXQ6IHBpcGVsaW5lTGF5b3V0LFxuICAgICAgdmVydGV4OiB7XG4gICAgICAgIG1vZHVsZTogc2hhZGVyTW9kdWxlLFxuICAgICAgICBlbnRyeVBvaW50OiAndnNfbWFpbicsXG4gICAgICAgIGJ1ZmZlcnM6IFtdLFxuICAgICAgfSxcbiAgICAgIGZyYWdtZW50OiB7XG4gICAgICAgIG1vZHVsZTogc2hhZGVyTW9kdWxlLFxuICAgICAgICBlbnRyeVBvaW50OiAnZnNfbWFpbicsXG4gICAgICAgIHRhcmdldHM6IFt7IGZvcm1hdCB9XSxcbiAgICAgIH0sXG4gICAgICBwcmltaXRpdmU6IHtcbiAgICAgICAgdG9wb2xvZ3k6ICd0cmlhbmdsZS1saXN0JyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICByZWNvcmRDb21tYW5kcyhlbmNvZGVyOiBHUFVDb21tYW5kRW5jb2RlciwgdmlldzogR1BVVGV4dHVyZVZpZXcpIHtcbiAgICBjb25zdCBwYXNzRW5jb2RlciA9IGVuY29kZXIuYmVnaW5SZW5kZXJQYXNzKHtcbiAgICAgIGNvbG9yQXR0YWNobWVudHM6IFt7XG4gICAgICAgIHZpZXcsXG4gICAgICAgIGxvYWRPcDogJ2NsZWFyJyxcbiAgICAgICAgc3RvcmVPcDogJ3N0b3JlJyxcbiAgICAgICAgY2xlYXJWYWx1ZTogQ0xFQVJfQ09MT1IsXG4gICAgICB9XSxcbiAgICB9KTtcbiAgICBwYXNzRW5jb2Rlci5zZXRQaXBlbGluZSh0aGlzLiNwaXBlbGluZSk7XG4gICAgcGFzc0VuY29kZXIuZHJhdygzLCAxKTtcbiAgICBwYXNzRW5jb2Rlci5lbmQoKTtcbiAgfVxufVxuIl19